name: Test wheels

on:
  workflow_dispatch:
    inputs:
      run-id:
        description: 'Use wheels built by dist.yml workflow with this run id (default: use PyPI)'
        required: false
      distributions:
        description: 'Distributions to test (JSON list; default: all)'
        required: false
      python-versions:
        description: 'Python versions to test (JSON list)'
        default: >-
          ['3.10']
        required: true
      oss:
        description: 'OSs to test (JSON list; default: all)'
        required: false
      constraints:
        description: 'Extra constraints'
        required: false
  workflow_call:
    inputs:
      run-id:
        type: string
        required: true
      distributions:
        type: string
        required: false
      python-versions:
        type: string
        required: false

jobs:

  tox:
    strategy:
      fail-fast: false
      matrix:
        distribution: >-
          ${{ fromJson(inputs.distributions
                       || '["sagemath-benzene",
                            "sagemath-bliss",
                            "sagemath-buckygen",
                            "sagemath-categories",
                            "sagemath-cddlib",
                            "sagemath-cliquer",
                            "sagemath-cmr",
                            "sagemath-combinat",
                            "sagemath-coxeter3",
                            "sagemath-ecl",
                            "sagemath-eclib",
                            "sagemath-flint",
                            "sagemath-fricas",
                            "sagemath-gap",
                            "sagemath-giac",
                            "sagemath-glucose",
                            "sagemath-graphs",
                            "sagemath-groups",
                            "sagemath-homfly",
                            "sagemath-kissat",
                            "sagemath-latte-4ti2",
                            "sagemath-libbraiding",
                            "sagemath-linbox",
                            "sagemath-lrslib",
                            "sagemath-maxima",
                            "sagemath-modules",
                            "sagemath-msolve",
                            "sagemath-ntl",
                            "sagemath-palp",
                            "sagemath-pari",
                            "sagemath-planarity",
                            "sagemath-plantri",
                            "sagemath-plot",
                            "sagemath-polyhedra",
                            "sagemath-qepcad",
                            "sagemath-rankwidth",
                            "sagemath-rubiks",
                            "sagemath-schemes",
                            "sagemath-sirocco",
                            "sagemath-singular",
                            "sagemath-standard-no-symbolics",
                            "sagemath-symbolics",
                           ]') }}
        python-version: >-
          ${{ fromJson(inputs.python-versions
                       || '["3.10",
                           ]') }}
        os: >-
          ${{ fromJson(inputs.oss
                       || '["ubuntu-latest",
                            "ubuntu-24.04-arm",
                            "macos-13",
                            "macos-14",
                           ]') }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          pattern: "${{ matrix.os }}-*-wheels"
          path: wheelhouse
          merge-multiple: true
          github-token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          run-id: ${{ github.event.inputs.run-id || inputs.run-id }}
        if: github.event.inputs.run-id || inputs.run-id
      - uses: actions/download-artifact@v4
        with:
          pattern: "noarch-wheels"
          path: wheelhouse
          merge-multiple: true
          github-token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          run-id: ${{ github.event.inputs.run-id || inputs.run-id }}
        if: github.event.inputs.run-id || inputs.run-id
      - uses: actions/download-artifact@v4
        with:
          pattern: "dist"
          path: wheelhouse
          merge-multiple: true
          github-token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          run-id: ${{ github.event.inputs.run-id || inputs.run-id }}
        if: github.event.inputs.run-id || inputs.run-id
      - uses: actions/setup-python@v5
        id: python
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install tox
        run: |
          pip install tox
      - name: Cache passagemath-conf wheelhouse
        uses: actions/cache@v4
        with:
          path: |
            ~/.sage/sage-*
          key: ci-wheels-${{ matrix.os }}-${{ github.event.inputs.run-id || inputs.run-id }}-${{ matrix.python-version }}
      - name: Run tox
        run: |
          set -x
          python_version=${{ matrix.python-version }}
          python_version_no_dot=${python_version/./}
          pkg=${{ matrix.distribution }}
          pkg_underscore=${pkg//-/_}
          WHEELHOUSE=$(pwd)/wheelhouse
          if [ -d "$WHEELHOUSE" ]; then
              export PIP_FIND_LINKS=file://$WHEELHOUSE
              (set +x; cd "$WHEELHOUSE" && for whl in *.whl; do
                   case $whl in
                       *$pkg_underscore-*)     ;;
                       *musllinux*)            ;;
                       *_i686*)                ;;
                       *-cp$python_version_no_dot-*|*-none-any-*) echo "${whl%%-*} @ file://$WHEELHOUSE/$whl";;
                   esac;
               done) | tee constraints.txt
          else
              mkdir -p $WHEELHOUSE
              pip download -v --only-binary :all: --no-deps -d $WHEELHOUSE pas$pkg
          fi
          echo "${{ inputs.constraints }}" >> constraints.txt
          export PIP_CONSTRAINT=$(pwd)/constraints.txt
          # Use passagemath-conf wheelhouse for missing wheels of third-party projects
          case "$python_version" in
              3.13)        export SAGE_CONF_TARGETS="fpylll gmpy2 lrcalc_python pplpy";;
          esac
          case "${{ matrix.os }}" in
              ubuntu*-arm) export SAGE_CONF_TARGETS="fpylll gmpy2 lrcalc_python pplpy";;
          esac
          if [ -n "$SAGE_CONF_TARGETS" ]; then
              case "${{ matrix.os }}" in
                  ubuntu*) sudo apt-get update
                           sudo apt-get install binutils make m4 perl flex bison tar bc gcc g++ ca-certificates libbz2-dev bzip2 xz-utils liblzma-dev libffi-dev;;
              esac
              pip install --force-reinstall -v passagemath-conf
              export PIP_FIND_LINKS="$PIP_FIND_LINKS $(sage-config SAGE_SPKG_WHEELS)"
              export PIP_PREFER_BINARY=1
          fi
          case "${{ matrix.os }}" in
              ubuntu*-arm) tag="manylinux*_aarch64";;
              ubuntu*)  tag="manylinux*_x86_64";;
              macos-13) tag="macosx_*_x86_64";;
              macos-14) tag="macosx_*_arm64";;
          esac
          # Run tox
          wheel_pattern="$WHEELHOUSE/*$pkg_underscore*-cp$python_version_no_dot-$tag.whl"
          eval ls -l $wheel_pattern
          wheel=$(eval ls $wheel_pattern | head -n1)
          if [ -n "$wheel" ]; then
              cd pkgs/$pkg
              tox_envs=$(tox -l -q| sed 's/sagepython-.*nopypi-norequirements/py$python_version_no_dot-norequirements/')
              extras=$(tox -l -q| sed -E 's/sagepython-.*nopypi-norequirements//;s/^-(.*)/[\1]/;s/-/,/;s/^/'$pkg'/;')
              set +e
              eval tox -v -v -e $(for env in $tox_envs; do echo -n "$comma$env"; comma=,; done) --installpkg "$wheel"
              status=$?
              set -e
              # Update known test failures
              cd ../..
              pip install passagemath-environment passagemath-repl
              for extra in $extras; do
                  sage --fixdoctests --distribution "$extra" --toxenv py$python_version_no_dot-norequirements --update-known-test-failures || echo "(ignored)"
              done
              git diff || :
              exit $status
          fi
